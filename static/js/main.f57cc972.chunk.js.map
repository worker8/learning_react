{"version":3,"sources":["ExampleForm.tsx","ExamplePagination.tsx","ExampleTable.tsx","ExampleSearch.tsx","github/GithubGuestPage.tsx","github/GithubList.tsx","github/GithubExample.tsx","SimpleCounter.tsx","github/GithubCodeReceiver.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ExampleForm","Content","style","minHeight","textAlign","lineHeight","whiteSpace","Text","fontSize","ExamplePagination","background","color","ExampleTable","data","tableColumns","title","dataIndex","sorter","a","b","campaignCode","sortDirections","cashbackLimit","key","render","item","type","onClick","onEdit","onDelete","dataSource","columns","Option","Select","Search","Input","ExampleSearch","emptyData","dataSet","originalData","toDelete","useState","setData","options","locations","prefectures","prefecture","push","code","name","fuse","Fuse","shouldSort","threshold","location","distance","maxPatternLength","minMatchCharLength","keys","defaultValue","margin","width","onChange","value","console","log","placeholder","onSearch","search","editData","deleteData","visible","onOk","filter","obj","onCancel","GithubGuestPage","padding","alt","src","paddingTop","navigate","GithubList","props","resultItems","GET_MY_INFO","gql","useQuery","loading","error","responseData","githubLoginHandler","viewer","repositories","edges","map","node","login","split","itemLayout","bordered","renderItem","githubRepo","Item","actions","id","marginRight","Meta","description","clearAccessToken","GithubExample","githubAccessToken","setClientAccessToken","Layout","Typography","SimpleCounter","count","setCount","className","justify","span","GithubCodeReceiver","paramArray","axios","method","headers","url","then","response","access_token","HomePath","children","theme","mode","e","App","useLocalStorage","setGithubAccessToken","createNewApolloClient","accessToken","ApolloClient","uri","request","operation","setContext","authorization","cache","InMemoryCache","client","setClient","accesToken","path","default","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f57cc972.chunk.js","sourcesContent":["import { RouteComponentProps } from \"@reach/router\";\nimport React from \"react\";\nimport { Layout, Typography } from \"antd\";\n\nconst ExampleForm: React.FC<RouteComponentProps> = () => {\n  return (\n    <Layout>\n      <Layout.Content\n        style={{\n          minHeight: 10,\n          textAlign: \"center\",\n          lineHeight: 10,\n          whiteSpace: \"nowrap\"\n        }}\n      >\n        <Typography.Text style={{ fontSize: 20 }}>\n          {\"It\\\\'s just a form\"}\n        </Typography.Text>\n      </Layout.Content>\n    </Layout>\n  );\n};\nexport default ExampleForm;\n","import { RouteComponentProps } from \"@reach/router\";\nimport React from \"react\";\nimport { Layout, Typography } from \"antd\";\n\nconst ExamplePagination: React.FC<RouteComponentProps> = () => {\n  return (\n    <Layout>\n      <Layout.Content\n        style={{\n          background: \"grey\",\n          minHeight: 10,\n          textAlign: \"center\",\n          lineHeight: 10,\n          whiteSpace: \"nowrap\"\n        }}\n      >\n        <Typography.Text style={{ fontSize: 20, color: \"white\" }}>\n          P a g i n a t i o n\n        </Typography.Text>\n      </Layout.Content>\n    </Layout>\n  );\n};\nexport default ExamplePagination;\n","import React, { FunctionComponent } from \"react\";\nimport { Table, Divider, Button } from \"antd\";\nimport { ColumnProps } from \"antd/lib/table/\";\nimport { ShopData } from \"./ExampleSearch\";\n\ninterface RandomData {\n  data: ShopData[];\n  onEdit: (editData: ShopData) => void;\n  onDelete: (deleteData: ShopData) => void;\n}\n\nexport const ExampleTable: FunctionComponent<RandomData> = data => {\n  const shopAction: FunctionComponent<ShopData> = (item: ShopData) => {\n    return (\n      <span>\n        <Button type=\"primary\" onClick={() => data.onEdit(item)}>\n          Edit\n        </Button>\n        <Divider type=\"vertical\" />\n        <Button onClick={() => data.onDelete(item)}>Delete</Button>\n      </span>\n    );\n  };\n  const tableColumns: ColumnProps<ShopData>[] = [\n    {\n      title: \"Login\",\n      dataIndex: \"login\"\n    },\n    {\n      title: \"Phone number\",\n      dataIndex: \"phone\"\n    },\n    {\n      title: \"First name\",\n      dataIndex: \"name.first\"\n    },\n    {\n      title: \"Last name\",\n      dataIndex: \"name.last\"\n    },\n    {\n      title: \"Campaign\",\n      dataIndex: \"campaignCode\",\n      sorter: (a: ShopData, b: ShopData) => a.campaignCode - b.campaignCode,\n      sortDirections: [\"ascend\", \"descend\"]\n    },\n    {\n      title: \"Cashback limit\",\n      dataIndex: \"cashbackLimit\",\n      sorter: (a: ShopData, b: ShopData) => a.cashbackLimit - b.cashbackLimit,\n      sortDirections: [\"ascend\", \"descend\"]\n    },\n    {\n      title: \"Company\",\n      dataIndex: \"company\"\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      render: shopAction\n    }\n  ];\n  return <Table dataSource={data.data} columns={tableColumns} />;\n};\n","import { RouteComponentProps } from \"@reach/router\";\nimport { Col, Input, Layout, Modal, Row, Select, Typography } from \"antd\";\nimport Fuse from \"fuse.js\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport { ExampleTable } from \"./ExampleTable\";\nimport locations from \"./res/locations.json\";\nimport originalData from \"./res/random_data.json\";\n\nconst { Option } = Select;\nconst { Search } = Input;\n\nexport type ShopData = {\n  login: string;\n  password: string;\n  phone: string;\n  campaignCode: number;\n  cashbackLimit: number;\n  name: {\n    first: string;\n    last: string;\n  };\n  company: string;\n};\ninterface DataProps {\n  dataSet: ShopData[];\n  toDelete?: ShopData | null;\n}\n\nconst ExampleSearch: React.FC<RouteComponentProps> = () => {\n  // Search results\n  const emptyData: DataProps = {\n    dataSet: originalData,\n    toDelete: null\n  };\n  const [data, setData] = useState(emptyData);\n\n  const handleChange = (value: string) => {\n    console.log(\"click \", value);\n  };\n\n  //drop down\n  const options = [];\n  for (const prefecture of locations.prefectures) {\n    options.push(<Option key={prefecture.code}>{prefecture.name}</Option>);\n  }\n\n  // Search\n  const fuse = new Fuse(data.dataSet, {\n    shouldSort: true,\n    threshold: 0.6,\n    location: 0,\n    distance: 100,\n    maxPatternLength: 32,\n    minMatchCharLength: 1,\n    keys: [\n      \"name.first\",\n      \"name.last\",\n      \"company\",\n      \"phone\",\n      \"campaignCode\",\n      \"cashbackLimit\"\n    ]\n  });\n\n  return (\n    <Layout>\n      <Layout.Content\n        style={{\n          background: \"lightcyan\",\n          minHeight: 10,\n          textAlign: \"center\",\n          lineHeight: 10,\n          whiteSpace: \"nowrap\"\n        }}\n      >\n        <Typography.Text style={{ fontSize: 20, color: \"black\" }}>\n          S E A R C H\n        </Typography.Text>\n\n        <Row>\n          <Col>\n            <Select\n              defaultValue={options[0].key + \"\"}\n              style={{ margin: 5, width: 100 }}\n              onChange={handleChange}\n            >\n              {options}\n            </Select>\n            <Search\n              placeholder=\"検索\"\n              onSearch={value => setData({ dataSet: fuse.search(value) })}\n              style={{ margin: 5, width: 400 }}\n            />\n          </Col>\n          <ExampleTable\n            data={data.dataSet}\n            onEdit={(editData: ShopData) => {\n              console.log(\"edit\", editData);\n            }}\n            onDelete={(deleteData: ShopData) => {\n              setData({ dataSet: data.dataSet, toDelete: deleteData });\n            }}\n          />\n        </Row>\n        <Modal\n          title=\"Delete item\"\n          visible={data.toDelete != null}\n          onOk={() => {\n            setData({\n              dataSet: data.dataSet.filter(obj => {\n                return obj != data.toDelete;\n              })\n            });\n          }}\n          onCancel={() => {\n            setData({ dataSet: data.dataSet });\n          }}\n        >\n          <p>Are you sure you want to delete item?</p>\n        </Modal>\n      </Layout.Content>\n    </Layout>\n  );\n};\n\nexport default ExampleSearch;\n","import { Layout, Row, Button } from \"antd\";\nimport React from \"react\";\nimport { navigate, RouteComponentProps } from \"@reach/router\";\n\nconst GithubGuestPage: React.FC<RouteComponentProps> = () => {\n  const githubClientId = \"9306671c5493706d29c5\";\n  const oauthOnClick = () => {\n    navigate(\n      `https://github.com/login/oauth/authorize?client_id=${githubClientId}`\n    );\n  };\n  return (\n    <Layout>\n      <Layout.Content style={{ padding: 16 }}>\n        <Row>\n          <img\n            alt=\"Github logo\"\n            src=\"https://image.flaticon.com/icons/png/128/25/25231.png\"\n          />\n        </Row>\n        <Row style={{ paddingTop: 10 }}>\n          <Button onClick={oauthOnClick}>Github OAuth</Button>\n        </Row>\n      </Layout.Content>\n    </Layout>\n  );\n};\n\nexport default GithubGuestPage;\n","import { RouteComponentProps } from \"@reach/router\";\nimport { Icon, List, PageHeader, Skeleton, Layout, Button } from \"antd\";\nimport { gql } from \"apollo-boost\";\nimport React from \"react\";\nimport { useQuery } from \"react-apollo\";\n\ninterface GithubViewer {\n  viewer: {\n    id: string;\n    name: string;\n    login: string;\n    repositories: {\n      edges: {\n        node: GithubRepository;\n      }[];\n    };\n  };\n}\ninterface GithubRepository {\n  name: string;\n  id: string;\n  description: string;\n}\n\nconst GithubList: React.FC<RouteComponentProps<{\n  clearAccessToken: () => void;\n}>> = props => {\n  const GET_MY_INFO = gql`\n    {\n      viewer {\n        login\n        name\n        id\n        repositories(last: 10) {\n          edges {\n            node {\n              name\n              id\n              description\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const { loading, error, data: responseData } = useQuery<GithubViewer>(\n    GET_MY_INFO\n  );\n\n  if (loading) {\n    return (\n      <Layout>\n        <Layout.Content>\n          <Skeleton />\n        </Layout.Content>\n      </Layout>\n    );\n  }\n\n  if (error && !loading) {\n    return (\n      <Layout>\n        <Layout.Content>Opps, an error has occurred...</Layout.Content>\n      </Layout>\n    );\n  }\n  let resultItems: GithubRepository[];\n  let githubLoginHandler = \"\";\n  if (!loading && responseData) {\n    resultItems = responseData.viewer.repositories.edges.map(\n      edges => edges.node\n    );\n    githubLoginHandler = responseData.viewer.login;\n    return (\n      <Layout>\n        <Layout.Content>\n          <PageHeader title={`${githubLoginHandler}'s Repositories`} />\n          <List\n            split={false}\n            itemLayout=\"vertical\"\n            bordered\n            style={{ margin: 15 }}\n            dataSource={resultItems}\n            renderItem={githubRepo => {\n              return (\n                <List.Item\n                  actions={[\n                    <span key={githubRepo.id}>\n                      <Icon type=\"edit\" style={{ marginRight: 8 }} />\n                      Edit\n                    </span>\n                  ]}\n                >\n                  <List.Item.Meta\n                    title={githubRepo.name}\n                    description={githubRepo.description}\n                  ></List.Item.Meta>\n                </List.Item>\n              );\n            }}\n          />\n          <Button\n            style={{ margin: 16 }}\n            onClick={() => {\n              if (props && props.clearAccessToken) {\n                props.clearAccessToken();\n              }\n            }}\n          >\n            Logout Button\n          </Button>\n        </Layout.Content>\n      </Layout>\n    );\n  }\n\n  return <div></div>;\n};\n\nexport default GithubList;\n","import { RouteComponentProps } from \"@reach/router\";\nimport React from \"react\";\nimport GithubExampleProps from \"./GithubExampleProps\";\nimport GithubGuestPage from \"./GithubGuestPage\";\nimport GithubList from \"./GithubList\";\n\nconst GithubExample: React.FC<RouteComponentProps<\n  GithubExampleProps\n>> = props => {\n  // /github_crud_auth + access token\n  if (props.githubAccessToken !== \"\") {\n    return (\n      <GithubList\n        clearAccessToken={() => {\n          if (props && props.setClientAccessToken) {\n            props.setClientAccessToken(\"\");\n          }\n        }}\n      />\n    );\n  } else {\n    // /github_crud_auth + no access token\n    return <GithubGuestPage />;\n  }\n};\n\nexport default GithubExample;\n","import { RouteComponentProps } from \"@reach/router\";\nimport { Button, Col, Layout, PageHeader, Row, Typography } from \"antd\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst { Content } = Layout;\nconst { Text } = Typography;\n\nconst SimpleCounter: React.FC<RouteComponentProps> = () => {\n  const [count, setCount] = useState(0);\n  const increase = () => {\n    setCount(count + 1);\n  };\n  const decrease = () => {\n    setCount(count - 1);\n  };\n\n  return (\n    <Layout>\n      <PageHeader\n        className=\"NavBar\"\n        title=\"Simple Counter\"\n        style={{ background: \"white\" }}\n      />\n      <Content style={{ background: \"white\" }}>\n        <div>\n          <Row style={{ margin: \"0 auto\" }} justify={\"center\"}>\n            <Col style={{ textAlign: \"center\" }} span={24}>\n              <Text style={{ margin: \"12px\", fontSize: \"40px\" }}>{count}</Text>\n            </Col>\n          </Row>\n          <Row>\n            <Col style={{ textAlign: \"center\" }} span={12}>\n              <Button type=\"primary\" onClick={decrease}>\n                - Button\n              </Button>\n            </Col>\n            <Col style={{ textAlign: \"center\" }} span={12}>\n              <Button type=\"primary\" onClick={increase}>\n                + Button\n              </Button>\n            </Col>\n          </Row>\n        </div>\n      </Content>\n    </Layout>\n  );\n};\n\nexport default SimpleCounter;\n","import React from \"react\";\nimport { navigate, RouteComponentProps } from \"@reach/router\";\nimport axios from \"axios\";\nimport { Skeleton } from \"antd\";\nimport GithubExampleProps from \"./GithubExampleProps\";\n\nconst GithubCodeReceiver: React.FC<RouteComponentProps<\n  GithubExampleProps\n>> = props => {\n  // /github_crud_auth?code=123abc + no access token\n  console.log(\"hello receive\");\n  if (\n    props &&\n    props.location &&\n    props.location.search &&\n    props.githubAccessToken === \"\"\n  ) {\n    const paramArray = props.location.search.split(\"=\");\n    if (paramArray[0] === \"?code\") {\n      axios({\n        method: \"get\",\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\",\n          \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\"\n        },\n        url: `https://github-oauth-jr.herokuapp.com/submit_code/${paramArray[1]}`\n      }).then(response => {\n        const { data } = response;\n\n        if (data && data.access_token && props.setClientAccessToken) {\n          props.setClientAccessToken(data.access_token);\n          navigate(\"/github_crud_auth\");\n        }\n      });\n      return (\n        <div style={{ margin: 16 }}>\n          <Skeleton />\n        </div>\n      );\n    }\n  }\n  return <div>An error has occurred...</div>;\n};\nexport default GithubCodeReceiver;\n","import { navigate, RouteComponentProps, Router } from \"@reach/router\";\nimport { Menu, PageHeader } from \"antd\";\nimport { ClickParam } from \"antd/lib/menu\";\nimport ApolloClient, { InMemoryCache } from \"apollo-boost\";\nimport React, { useState } from \"react\";\nimport { ApolloProvider } from \"react-apollo\";\nimport useLocalStorage from \"react-use-localstorage\";\nimport \"./App.css\";\nimport ExampleForm from \"./ExampleForm\";\nimport ExamplePagination from \"./ExamplePagination\";\nimport ExampleSearch from \"./ExampleSearch\";\nimport GithubExample from \"./github/GithubExample\";\nimport SimpleCounter from \"./SimpleCounter\";\nimport GithubCodeReceiver from \"./github/GithubCodeReceiver\";\n\nconst HomePath: React.FC<RouteComponentProps> = ({ children }) => {\n  const onClickHandler = (e: ClickParam): void => {\n    navigate(e.key);\n  };\n\n  return (\n    <div>\n      <PageHeader title=\"React Playground\" />\n      <Menu\n        theme=\"light\"\n        mode=\"horizontal\"\n        onClick={onClickHandler}\n        style={{ lineHeight: \"64px\" }}\n      >\n        <Menu.Item key=\"simple_counter\">Simple Counter</Menu.Item>\n        <Menu.Item key=\"search\">Search</Menu.Item>\n        <Menu.Item key=\"pagination\">Pagination</Menu.Item>\n        <Menu.Item key=\"form\">Form</Menu.Item>\n        <Menu.Item key=\"github_crud_auth\">Github Example</Menu.Item>\n      </Menu>\n\n      <div>{children}</div>\n    </div>\n  );\n};\n\nconst App: React.FC = () => {\n  const [githubAccessToken, setGithubAccessToken] = useLocalStorage(\n    \"github_access_token\",\n    \"\"\n  );\n  const createNewApolloClient = (accessToken: string) => {\n    return new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: operation => {\n        operation.setContext({\n          headers: {\n            authorization: `Bearer ${accessToken}`\n          }\n        });\n      },\n      cache: new InMemoryCache()\n    });\n  };\n\n  const [client, setClient] = useState(\n    createNewApolloClient(githubAccessToken)\n  );\n  const setClientAccessToken = (accesToken: string) => {\n    setGithubAccessToken(accesToken);\n    setClient(createNewApolloClient(accesToken));\n  };\n\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <HomePath path=\"/\">\n          <SimpleCounter default path=\"simple_counter\" />\n          <ExampleSearch path=\"search\" />\n          <ExamplePagination path=\"pagination\" />\n          <ExampleForm path=\"form\" />\n          <GithubCodeReceiver\n            setClientAccessToken={setClientAccessToken}\n            githubAccessToken={githubAccessToken}\n            path=\"github_crud_auth_code\"\n          />\n          <GithubExample\n            setClientAccessToken={setClientAccessToken}\n            githubAccessToken={githubAccessToken}\n            path=\"github_crud_auth/\"\n          />\n        </HomePath>\n      </Router>\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}